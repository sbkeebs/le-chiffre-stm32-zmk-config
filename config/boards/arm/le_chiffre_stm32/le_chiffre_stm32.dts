/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <st/f0/stm32f072Xb.dtsi>
#include <st/f0/stm32f072v(8-b)tx-pinctrl.dtsi>

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    model = "Le Chiffre (stm32)";
    compatible = "sporkus,le_chiffre_stm32", "st,stm32f072";

    chosen {
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,console = &cdc_acm_uart;
        zmk,kscan = &kscan;
        zmk,matrix_transform = &transform;
        /* TODO: Enable once we support the IC for underglow
        zmk,underglow = &led_strip;
         */
    };

    transform: transform {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <10>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)     RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)     RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)     RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
                        RC(3,2)     RC(3,4)             RC(3,6)     RC(3,7)
        >;
    };

    transform_36key: transform_36key {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <10>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)     RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)     RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)     RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
                        RC(3,2) RC(3,3) RC(3,4)     RC(3,6) RC(3,8) RC(3,7)
        >;
    };

    transform_with_encoder: transform_with_encoder {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <10>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)             RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)             RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)             RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
                        RC(3,2)     RC(3,4)                     RC(3,6)     RC(3,7)
                                                  RC(3,5)
        >;
    };

    transform_36key_with_encoder: transform_36key_with_encoder {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <10>;

        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)             RC(0,5) RC(0,6) RC(0,7) RC(0,8) RC(0,9)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)             RC(1,5) RC(1,6) RC(1,7) RC(1,8) RC(1,9)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)             RC(2,5) RC(2,6) RC(2,7) RC(2,8) RC(2,9)
                        RC(3,2) RC(3,3) RC(3,4)             RC(3,6) RC(3,8) RC(3,7)
                                                  RC(3,5)
        >;
    };

    kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";

        diode-direction = "row2col";

        col-gpios
        = <&gpiob 11 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiob 12 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiob 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiob 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiob 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpioc 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpioc 14 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpioc 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiof 0  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiof 1  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ;
        row-gpios
        = <&gpioa 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiob 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiob 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&gpiob 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ;
    };

    encoder: encoder {
        compatible = "alps,ec11";
        label = "ENCODER";
        a-gpios = <&gpiob 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpiob 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
	steps = <30>;
        status = "disabled";
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        status = "disabled";
        sensors = <&encoder>;

	triggers-per-rotation = <15>;
    };
};

zephyr_udc0: &usb {
    status = "okay";

    pinctrl-0 = <&usb_dm_pa11 &usb_dp_pa12>;
    pinctrl-names = "default";

    num-bidir-endpoints = <6>;

    cdc_acm_uart: cdc_acm_uart {
        compatible = "zephyr,cdc-acm-uart";
        label = "CDC_ACM_0";
    };
};

&clk_hsi {
    status = "okay";
};

&clk_hsi48 {
    status = "okay";
};

&pll {
    prediv = <1>;
    mul = <6>;
    clocks = <&clk_hsi>;
    status = "okay";
};

&rcc {
    clocks = <&pll>;
    clock-frequency = <DT_FREQ_M(48)>;
    ahb-prescaler = <1>;
    apb1-prescaler = <1>;
};


&rtc {
    status = "okay";
};

&flash0 {
    /*
     * For more information, see:
     * http: //docs.zephyrproject.org/latest/guides/dts/index.html#flash-partitions
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        /* Set 6Kb of storage at the end of the 128Kb of flash */
        storage_partition: partition@3e800 {
            label = "storage";
            reg = <0x0001e800 0x00001800>;
        };
    };
};
